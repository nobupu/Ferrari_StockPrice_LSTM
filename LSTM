# Predcit the stock price of Ferrari(RACE) by LSTM
# Reference: Aidemy (URL: https://aidemy.net/courses)
# Reference URL: https://blog.aidemy.net/entry/2019/02/02/182210

# 1. Import Packages

import matplotlib.pyplot as plt
import numpy as np
from numpy import newaxis
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout
from keras.layers.recurrent import SimpleRNN, LSTM
from sklearn.preprocessing import MinMaxScaler
plt.style.use('ggplot')


# 2. Load CSV file which contains stock price
df_ferrari_stock = pd.read_csv("./data/df_FerrariStockPrice3.csv")

# 3. Confirm the data
# Sort the values
df_ferrari_stock['Date'] = pd.to_datetime(df_ferrari_stock['Date'])
df_ferrari_stock.sort_values(by='Date', inplace=True)
# Put Date into the index
df_ferrari_stock.set_index('Date', inplace=True)
close_ts = df_ferrari_stock['Close']

# 4. Create teh data set of time series a part of window_siz
def split_window_data(np_array, window_size, normalization=False, window_normalization=False):
    target_array = np_array.copy()
    # Normalize the whole of data
    if normalization:
        scaler = MinMaxScaler(feature_range=(0, 1))
        target_array = scaler.fit_transform(target_array)
    # Divide data by window_size
    sequence_length = window_size + 1
    window_data = []
    for index in range(len(target_array) - window_size):
        window = target_array[index: index + sequence_length]
        
        if window_normalization:
            window = [((float(p) / float(window[0])) - 1) for p in window]
        window_data.append(window)
    return window_data


window_size = 15
window_data = split_window_data(
    close_ts, window_size, normalization=False, window_normalization=True)
    
# 5. Separate the data into train one and test one.
def split_train_test_window(np_array_window, window_size, train_rate=0.7, train_shuffle=False):
    window_data = np_array_window.copy()
    # Train data (70% of a whole) 
    row = round(train_rate * window_data.shape[0])
    # Extrac 70% window data
    train = window_data[0:row, :]
    
    x_train = train[:, :-1]
    y_train = train[:, -1]
    # The rest of 30 % as Test data
    test = window_data[row:, ]
    x_test = test[:, :-1]
    y_test = test[:, -1]
    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
    return x_train, y_train, x_test, y_test


window_data = np.array(window_data)
X_train, Y_train, X_test, Y_test = split_train_test_window(
    window_data,
    window_size=window_size,
    train_shuffle=True
)

# 6. Create model

inpiut_size = [X_train.shape[1], X_train.shape[2]]

model = Sequential()
model.add(
    LSTM(
        input_shape=(inpiut_size[0], inpiut_size[1]),
        units=15,
        return_sequences=False
    )
)
model.add(
    Dense(units=1)
)
model.add(Activation('linear'))
model.compile(loss='mse', optimizer='adam')
history = model.fit(X_train, Y_train, batch_size=200,
                    epochs=5, validation_split=0.1, verbose=0)
                    
"""
# 7. Visualize the process of machine learning (Option)
# Transition of loss function
plt.figure(figsize=(8, 5))
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""


# 8. Predict from the past 15 days to the future 10 days.
prediction_seqs = []
prediction_len = 10

for i in range(int(len(X_test)/prediction_len)):
    curr_frame = X_test[i*prediction_len]
    predicted = []

    for j in range(prediction_len):
    
        # Prediction
        pred = model.predict(curr_frame[newaxis, :, :])
        predicted.append(pred[0, 0])
        curr_frame = curr_frame[1:, :]
        curr_frame = np.insert(curr_frame, window_size -
                               1, predicted[-1], axis=0)
    prediction_seqs.append(predicted)
    
# Output of prediction result
plt.figure(figsize=(15, 8))


plt.plot(close_ts.index[-len(Y_test):],Y_test, label='True Data')
predict = np.array(prediction_seqs).flatten().tolist()
plt.plot(close_ts.index[-len(Y_test):-(len(Y_test)-len(predict))],predict, label='Prediction')
plt.xticks(rotation=45)
plt.legend()
plt.show()
np.array(prediction_seqs).shape
